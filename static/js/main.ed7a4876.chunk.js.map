{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","container/ErrorBoundary.js","container/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","App","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","Card","key","SearchBox","searchField","searchChange","type","placeholder","value","onChange","Scroll","props","console","log","children","style","overflowY","border","height","ErrorBoundary","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","inherits","createClass","error","info","setState","Component","onSearchChange","event","target","_this2","fetch","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","container_ErrorBoundary","components_CardList","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_container_App"],"mappings":"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","file":"static/js/main.ed7a4876.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\nconst App = ({ id, name, email }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?300x300`} alt=\"\"></img>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  // if (true) {\n  //   throw new Error(\"Noooooo!\");\n  // }\n  return (\n    <div>\n      {robots.map((user) => {\n        return (\n          <Card\n            key={user.id}\n            id={user.id}\n            name={user.name}\n            email={user.email}\n          ></Card>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search field\"\n        value={searchField}\n        onChange={searchChange}\n      ></input>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  console.log(props.children);\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Opps! Something is wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchField: \"\",\n      robots: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((users) => {\n        this.setState({ robots: users });\n      });\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n  render() {\n    const { searchField, robots } = this.state;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    if (!robots.length) {\n      return <h1>Loading</h1>;\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f1\">RoboFriends</h1>\n          <SearchBox\n            searchChange={this.onSearchChange}\n            searchField={this.state.searchField}\n          ></SearchBox>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport \"tachyons\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./container/App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    {/* <CardList robots={robots}></CardList>\n     */}\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}